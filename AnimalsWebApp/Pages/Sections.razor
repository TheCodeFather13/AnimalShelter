@page "/sections"
@using AnimalShelterCore;
@using UseCases.DataAnimalsPluginInterfaces;
@using UseCases.SectionUseCasesInterfaces;
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager NavigationManager
@inject ISectionRepository SectionRepository
@inject IViewSectionsUseCase ViewSectionsUseCase
@inject IJSRuntime JSRuntime
@inject IDeleteSectionUseCase DeleteSectionUseCase


<h2 class="bgForOl" style="margin:10px;text-align:center;border-radius:5px;padding:8px;">Полезные статьи</h2>

@if(sections == null)
{
    <h2 class="bgForOl" style="margin:10px;text-align:center;border-radius:5px;padding:8px;">Страница статей пуста!</h2>
}
else
{
   <div class="flexForImg">
        @foreach(var section in sections)
        {
            <div class="flexForImg2">
                <div class="containerForAnimalsDescription">
                    <h4 style="text-align:center;padding:5px">@(section.Title)</h4>
                    <button class="btn btn-success" @onclick="@(() => OnInfoSection(section))" style="margin:0 5px 15px 0">Подробнее</button>
                     <CascadingAuthenticationState>
                    <AuthorizeView Roles="Admin">
                            <button class="btn btn-danger" @onclick="@(() => OnDeleteSection(section.SectionId))" style="margin:0 5px 15px 0">Удалить</button>
                            <button class="btn btn-info" @onclick="@(() => OnEditSection(section))" style="margin:0 0 15px 0">Редактировать</button>
                        </AuthorizeView>
                    </CascadingAuthenticationState>
                </div>
                <img src="@(section.ImagePath)" class="imgForAnimals" />
            </div>
        }
    </div>
}

@code {

    private IEnumerable<Section> sections;
    protected List<Section> searchSectionData = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        sections = ViewSectionsUseCase.Execute();
        searchSectionData = sections.ToList();    
    }

    private async Task OnDeleteSection(int sectionId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены?");

        if (confirmed)
        {
            DeleteSectionUseCase.Delete(sectionId);
            NavigationManager.NavigateTo("/sections", true);
        }
    }

    private void OnEditSection(Section section)
    {
        NavigationManager.NavigateTo($"/editsection/{section.SectionId}");
    }

    private void OnInfoSection(Section section)
    {
        NavigationManager.NavigateTo($"/sectioninfo/{section.SectionId}");
    }

    private void OnGoToDogTravel()
    {
        NavigationManager.NavigateTo("/dogtravel");
    }

    private void OnGoToDogVaccination()
    {
        NavigationManager.NavigateTo("/dogvaccination");
    }

    private void OnGoToDogExhibition()
    {
        NavigationManager.NavigateTo("/dogexhibition");
    }

    private void OnGoToDogForChildren()
    {
        NavigationManager.NavigateTo("/dogforchildren");
    }

    private void OnGoToCatPregnant()
    {
        NavigationManager.NavigateTo("/catpregnant");
    }

    private void OnGoToCatFood()
    {
        NavigationManager.NavigateTo("/catfood");
    }

    private void OnGoToCatIntoxication()
    {
        NavigationManager.NavigateTo("/catintoxication");
    }

    private void OnGoToCatTray()
    {
        NavigationManager.NavigateTo("/cattray");
    }

    private void OnGoToCatToys()
    {
        NavigationManager.NavigateTo("/cattoys");
    }

}
