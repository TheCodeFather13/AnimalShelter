@page "/clientorders"
@using AnimalShelter;
@using AnimalShelterCore;
@using UseCases.AnimalUseCasesInterfaces;
@using UseCases.ClientOrderUseCasesInterfaces;

@inject NavigationManager NavigationManager
@inject IAddClientOrderUseCase AddClientOrderUseCase
@inject IRemoveClientOrderUseCase RemoveClientOrderUseCase
@inject IViewClientOrderUseCase ViewClientOrderUseCase
@inject IGetAnimalByIdUseCase GetAnimalByIdUseCase

<table class="table table-bordered table-striped" style="width:100%">
    <thead>
        <tr>         
            <th width="10%">ID Животного</th>
            <th width="10%">ID Заявки</th>
            <th width="25%">Имя</th>
            <th width="55%">Контакты</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var clientOrder in clientOrders)
        {
            <tr>               
                <td>@clientOrder.animalId</td>               
                <td>@clientOrder.ClientOrderId</td>
                <td>@clientOrder.Name</td>
                <td>
                    @clientOrder.Contacts &nbsp;&nbsp;
                    
                    <button class="btn btn-danger" @onclick="@(() => OnDeleteClientOrder(clientOrder.ClientOrderId))">Удалить</button>
                    <button class="btn btn-success" @onclick="@(() => OnEditClientOrder(clientOrder))">Редактировать</button>
                </td>                      
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<ClientOrder>? clientOrders;   

    private Animal animal;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        clientOrders = ViewClientOrderUseCase.Execute();      
    }

    //protected override void OnAfterRender(bool firstRender) Обновляет страницу сам
    //{
    //    if (firstRender)
    //    {
    //        var timer = new Timer(new TimerCallback(_ =>
    //        {
    //            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    //        }), null, 3000, 3000);
    //    }
    //}

    private void OnDeleteClientOrder(int clientId)
    {
        RemoveClientOrderUseCase.RemoveClientOrder(clientId);
        NavigationManager.NavigateTo("/clientorders", true);
    }

    private void OnEditClientOrder(ClientOrder clientOrder)
    {
        NavigationManager.NavigateTo($"/editclientorder/{clientOrder.ClientOrderId}"); 
    }
}
