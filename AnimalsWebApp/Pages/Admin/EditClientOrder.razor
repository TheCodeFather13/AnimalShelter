@page "/editclientorder/{clientorderId}"
@using AnimalShelterCore;
@using Microsoft.AspNetCore.Components.Forms;
@using UseCases.ClientOrderUseCasesInterfaces;

@inject IEditClientOrderUseCase EditClientOrderUseCase
@inject IGetClientOrderByIdUseCase GetClientOrderByIdUseCase
@inject IViewClientOrderUseCase ViewClientOrderUseCase
@inject NavigationManager NavigationManager

<div class="line"></div>

@if (clientOrder == null)
{
    <SpinnerComponent></SpinnerComponent>
}
else
{
    <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">
        <button class="btn btn-danger" @onclick="OnCancel">Назад</button>
    </p>
    <EditForm Model="clientOrder" OnValidSubmit="OnValidSubmit" class="mx-1 mx-md-4">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="container h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-lg-12 col-xl-11">
                    <div class="card text-black" style="border-radius: 25px;">
                        <div class="card-body p-md-5">
                            <div class="row justify-content-center">
                                <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div class="form-outline flex-fill mb-0">
                                            <label for="clientName" class="form-label">Имя: </label>
                                            <InputText id="clientName" @bind-Value="clientOrder.Name" class="form-control" placeholder="Введите имя"></InputText>
                                        </div>
                                    </div>                

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                                        <div class="form-outline flex-fill mb-0">
                                            <label for="clientContacts" class="form-label">Контакты: </label>
                                            <InputText id="clientContacts" @bind-Value="clientOrder.Contacts" class="form-control"></InputText>
                                        </div>
                                    </div>                                  

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-key fa-lg me-3 fa-fw"></i>
                                        <button class="btn btn-success" type="submit">Сохранить редактирование</button>
                                    </div>

                                    @if (displayValidationErrorMessages)
                                    {
                                        <div class="col-md-4" style="margin-top:10px">
                                            <label>Ошибка: </label>
                                            <ValidationSummary />
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
    @if (displayUserAddedToDB)
    {
        <div class="row bg-success text-white" style="margin-top:200px; height:40px">
            <label class="p-2">Контакты клиента успешно редактировано!</label>
        </div>
    }
}

@code {
    [Parameter]
    public string ClientOrderId { get; set; }
    private ClientOrder clientOrder;  

    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(this.ClientOrderId, out int iClientOrderId))
        {
            var order = GetClientOrderByIdUseCase.GetClientOrderById(iClientOrderId);
            clientOrder = new ClientOrder
                {
                    ClientOrderId = order.ClientOrderId,
                    Name = order.Name,
                    Contacts = order.Contacts
                };
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        clientOrder = new ClientOrder();

    }

    private void OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {
            EditClientOrderUseCase.Execute(this.clientOrder);
            displayValidationErrorMessages = false;
            displayUserAddedToDB = true;
            NavigationManager.NavigateTo("/clientorders");
        }
        else
        {
            displayValidationErrorMessages = true;
            displayUserAddedToDB = false;
        }
    }   

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/clientorders");
    }
}


