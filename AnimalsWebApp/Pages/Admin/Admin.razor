@page "/admin"
@attribute [Authorize(Roles="Admin")]
@using AnimalShelter;
@using Microsoft.AspNetCore.Authorization;
@using UseCases.AnimalUseCasesInterfaces;
@using UseCases.UseCasesInterfaces;

@inject NavigationManager NavigationManager
@inject IDeleteAnimalUseCase DeleteAnimalUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IViewAnimalsUseCase ViewAnimalsUseCase
@inject IEditAnimalUseCase EditAnimalUseCase

<PageTitle>Админ</PageTitle>

@if (animals == null)
{
    <SpinnerComponent></SpinnerComponent>
}
else
{
      <div class="input-group col buttons">
        <p class="buttons">
            <button type="button" class="btn btn-success" @onclick="OnAddAnimal">Добавить животное</button>         
        </p>

        <p class="buttons">
            <button type="button" class="btn btn-success" @onclick="OnAddCategory">Добавить категорию</button>
        </p>

        <p class="buttons">
            <input type="text" size="23" class="form-control" placeholder="Искать животное по имени" @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
            @if(SearchString.Length > 0)
            {
                <div class="input-group-append">
                    <button class="btn btn-danger" @onclick="ResetSearch">
                        <i class="fas fa-times">Отменить поиск</i>
                    </button>
                </div>
            }
        </p>

        <div class="dropdown">
            
            <button class="btn btn-secondary dropdown-toggle buttons" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                &nbsp;&nbsp;&nbsp;Сортировать по
            </button>
            
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li><button class="dropdown-item" @onclick="OnDescAlphabet" >Имени</button></li>
                <li><button class="dropdown-item" @onclick="OnCategorySortCatsDogs">Кошки-Собаки</button></li>
                <li><button class="dropdown-item" @onclick="OnCategorySortDogsCats">Собаки-Кошки</button></li>
                <li><button class="dropdown-item" @onclick="OnSortGender">По полу</button></li>
                <li><button class="dropdown-item" @onclick="OnNormalMode">По умолчанию</button></li>
            </ul>
        </div>

    </div>
  
        <table class="table smartTable">
            <thead>
                <tr>
                    <th>Фото</th>
                    <th>Категория</th>
                    <th>Имя</th>
                    <th>Пол</th>
                    <th>Возраст</th>
                    <th>День издания</th>
                    <th>Контакты</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var animal in animals)
                {
                    <tr>
                        <td><img src="@animal.ImagePath" alt="" class="imgForAnimals" /></td>
                        <td>@GetCategoryByIdUseCase.Execute(animal.CategoryId).Name</td>
                        <td>@animal.Name</td>
                        <td>@animal.Gender</td>
                        <td>@animal.Age</td>
                        <td>@animal.DayOfPublication</td>
                        <td>@animal.Contacts</td>
                        <td>
                            <button class="btn btn-danger" @onclick="@(() => OnDeleteAnimal(animal.AnimalId))">Удалить</button>
                            <button class="btn btn-info" @onclick="@(() => OnEditAnimal(animal))">Редактировать</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>  
}

@code {
    private IEnumerable<Animal> animals;
    protected List<Animal> searchAnimalData = new();
    protected string SearchString { get; set; } = string.Empty;

    protected void FilterUser()
    {
        if(!string.IsNullOrEmpty(SearchString))
        {
            animals = searchAnimalData.Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
    }

    private void OnAddCategory()
    {
        NavigationManager.NavigateTo("addcategory");
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        animals = searchAnimalData;
    }

    private void OnEditAnimal(Animal animal)
    {
        NavigationManager.NavigateTo($"/editanimal/{animal.AnimalId}");
    }

    public void OnAddAnimal()
    {
        NavigationManager.NavigateTo("/addanimal");
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        animals = ViewAnimalsUseCase.Execute();
        searchAnimalData = animals.ToList();
    }

    private void OnDeleteAnimal(int animalId)
    {
        DeleteAnimalUseCase.Delete(animalId);
        NavigationManager.NavigateTo("/admin");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private void OnDescAlphabet()
    {
        animals = searchAnimalData.OrderBy(x => x.Name).ToList();
    }

    private void OnCategorySortDogsCats()
    {
        animals = searchAnimalData.OrderByDescending(x => x.CategoryId).ToList();
    }

    private void OnCategorySortCatsDogs()
    {
        animals = searchAnimalData.OrderBy(x => x.CategoryId).ToList();
    }

    private void OnSortGender()
    {
        animals = searchAnimalData.OrderBy(x => x.Gender).ToList();
    }

    private void OnNormalMode()
    {
        animals = searchAnimalData.ToList();
    }
}
