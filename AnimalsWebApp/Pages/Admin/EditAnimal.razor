@page "/editanimal/{animalId}"
@using AnimalShelter;
@using AnimalShelterCore;
@using Microsoft.AspNetCore.Components.Forms
@using UseCases.AnimalUseCasesInterfaces;
@using UseCases.DataAnimalsPluginInterfaces;
@using UseCases.UseCasesInterfaces;

@inject IEditAnimalUseCase EditAnimalUseCase
@inject IGetAnimalByIdUseCase GetAnimalByIdUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IAnimalRepository AnimalRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="line"></div>

@if (animal == null)
{
    <SpinnerComponent></SpinnerComponent>
}
else
{
    <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">
        <button class="btn btn-danger" @onclick="OnCancel">Назад</button>
    </p>
    <EditForm Model="animal" OnValidSubmit="OnValidSubmit" class="mx-1 mx-md-4" enctype="form-data">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="container h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-lg-12 col-xl-11">
                    <div class="card text-black" style="border-radius: 25px;">
                        <div class="card-body p-md-5">
                            <div class="row justify-content-center">
                                <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                    <div class="d-flex flex-row align-items-center mb-4">                                     
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fas fa-user fa-lg fa-fw"></i>
                                            <label for="name" class="form-label">Имя: </label>
                                            <InputText id="name" @bind-Value="animal.Name" class="form-control" placeholder="Введите имя"></InputText>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">                                    
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fa-solid fa-hippo"></i>
                                            <label for="category">Категория: </label>
                                            <select id="category" @bind="animal.CategoryId">
                                                <option value="0">Выберите категорию животного</option>
                                                @foreach (var category in categories)
                                                {
                                                    <option value="@category.CategoryId">@category.Name</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fa-solid fa-cake-candles"></i>
                                            <label for="age" class="form-label">Возраст: </label>
                                            <InputText id="age" @bind-Value="animal.Age" class="form-control"></InputText>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fa-solid fa-venus-mars"></i>
                                            <label for="gender" class="form-label">Пол: </label>
                                            <InputText id="gender" @bind-Value="animal.Gender" class="form-control" placeholder="Male или Female"></InputText>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fa-solid fa-phone-volume"></i>
                                            <label for="contacts" class="form-label">Контакты: </label>
                                            <InputText id="contacts" @bind-Value="animal.Contacts" class="form-control"></InputText>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fa-solid fa-syringe"></i>
                                            <label for="vaccination">
                                                Вакцинация:
                                                <InputCheckbox @bind-Value="animal.IsVaccinated" class="form-check-input" />
                                            </label>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fa-solid fa-calendar-days"></i>
                                            <label for="dayOfPublication">День публикации: </label>
                                          @*  <InputDate id="dayOfPublication" @bind-Value="animal.DayOfPublication"></InputDate>*@
                                            <input type="date" id="dayOfPublication" @bind-value="animal.DayOfPublication"></input>
                                      </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <div class="form-outline flex-fill mb-0">
                                            <i class="fa-solid fa-camera-retro"></i>
                                            <label for="images">Вставить фотку</label>
                                            &nbsp;
                                         
                                              <img src="@animal.ImagePath" class="imgForAnimals" />                                           

                                            <InputFile id="uploadBox" OnChange="OnFileChange" class="form-label"></InputFile>
                                        </div>
                                    </div>


                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <button class="btn btn-success" type="submit">
                                            <i class="fa-solid fa-share-from-square"></i> &nbsp;Сохранить редактирование
                                        </button>
                                    </div>

                                    @if (displayValidationErrorMessages)
                                    {
                                        <div class="col-md-4" style="margin-top:10px">
                                            <label>Ошибка: </label>
                                            <ValidationSummary />
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
    @if (displayUserAddedToDB)
    {
        <div class="row bg-success text-white" style="margin-top:200px; height:40px">
            <label class="p-2">Животное успешно редактировано!</label>
        </div>
    }
}


@code {
    [Parameter]
    public string AnimalId { get; set; }
    private Animal animal;
    private IEnumerable<Category> categories;
    //  private string dayOfPublication = DateTime.Now.ToString("dd/MM/yyyy");


    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(this.AnimalId, out int ianimalId))
        {
            var anim = GetAnimalByIdUseCase.GetAnimalById(ianimalId);
            animal = new Animal
                {
                    AnimalId = anim.AnimalId,
                    CategoryId = anim.CategoryId,
                    Name = anim.Name,
                    Gender = anim.Gender,
                    Age = anim.Age,
                    DayOfPublication = anim.DayOfPublication,
                    Contacts = anim.Contacts,
                    ImagePath = anim.ImagePath,
                    IsVaccinated = anim.IsVaccinated
                };
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //  dayOfPublication = DateTime.Now.ToString("dd/MM/yyyy");
        animal = new Animal();
        categories = ViewCategoriesUseCase.Execute();
    }

    private void OnValidSubmit(EditContext context)
    {            
        if (context.Validate())
        {           
            EditAnimalUseCase.Execute(this.animal);
            displayValidationErrorMessages = false;
            displayUserAddedToDB = true;
            NavigationManager.NavigateTo("/admin");
        }
        else
        {
            displayValidationErrorMessages = true;
            displayUserAddedToDB = false;
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        // Так работает, но режется картинка
        //var format = "image/jpg";
        //var resizedImage = await e.File.RequestImageFileAsync(format, 250, 250);
        //var buffer = new byte[resizedImage.Size];
        //await resizedImage.OpenReadStream().ReadAsync(buffer);
        //var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        //animal.ImagePath = imageData;

       
            // Так работает на УРА!
            using MemoryStream ms = new();
            var resized = await e.File.RequestImageFileAsync(e.File.ContentType, maxWidth: 500, maxHeight: 500);
            using Stream fileStream = resized.OpenReadStream();
            await fileStream.CopyToAsync(ms);

            // Получаем конечный запрашиваемый файл
            var fileString = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";

            // Передаем файл в нашу базу данных
            animal.ImagePath = fileString;
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/admin");
    }
}
}
